/* Class header
 * Copyright (C) 2014 Brendan Bruner
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * bbruner@ualberta.ca
 *
 *  Created on: 2014-11-19
 *      Author: brendan
 */

#ifndef CLASS_H_
#define CLASS_H_

#define OBJ_REFERENCE		self
#define _OBJECT_ASSERT_		


#define Constructor(D)		void new##D( D *OBJ_REFERENCE )
#define Class(D)		typedef struct _##D D;			\
				Constructor( D );			\
				struct _##D				\
				{					
#define EndClass			unsigned char * _isVoid_;	\
				}
#define Extends(S)		/* Super class */			\
				S _super##S;


#define ClassMethod(O)		do {					\
					/* Assert object is safe. */	\
  					_OBJECT_ASSERT_( (void *) O );	\
					if( O->_isVoid_ == _OBJ_VOID_ )	\
					  {				\
						/* Object not inialized. */			\
						_OBJECT_ASSERT_( ( void *) _OBJ_VOID_ );	\
					  }				\
					O->_isVoid_ = _OBJ_FULL_;	\
				} while( 0 )
#define



#define Super(S)		/* Initialize super class */		\
				new##S( OBJ_REFERENCE->_super##S );
#define LinkMethod(M)		/* Assign function to pointer. */	\
				OBJ_REFERENCE-> M = & M
#define OverrideMethod(S,M)	/* Reassign function to a pointer */	\
				/* in super class. */			\
				((S *) OBJ_REFERENCE)-> M = & M


#define Forward(C)		typedef struct _##C C

#endif /* CLASS_H_ */
